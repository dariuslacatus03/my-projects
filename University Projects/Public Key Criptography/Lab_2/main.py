import math

#  A group G is said to be 'cyclic' if it can be generated by at least one element in the group.
#  If a group is cyclic the element or elements that can generate the whole group are referred to as generators of
#  the group.


def find_generators(n):
    '''
    For the group Zn = { 0, 1, 2, …, n−1 }, the requirement for an element of Zn to be a generator
    is: gcd(element, n) = 1, i.e. the element and n need to be coprime.
    :param n: number of elements of Z
    :return: list of all generators of Zn
    '''
    generators = []

    for g in range(1, n):  # We start from 1, as 0 cannot be a generator
        if math.gcd(g, n) == 1:  # If the g and n are coprime, then g is a generator
            generators.append(g)

    return generators


n = 20x
generators_of_Zn = find_generators(n)
print(f"Generators of Z{n} are: {generators_of_Zn}")
